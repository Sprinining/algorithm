// 这个文件用于定义自定义的构建任务，可以用快捷键快速编译运行代码
{
    "version": "2.0.0", // tasks 配置文件的版本号，固定为 2.0.0
    "tasks": [ // 任务列表，可以定义多个构建或其他命令任务
        {
            "type": "cppbuild", // 任务类型，指定为 C++ 构建任务，VS Code 内置支持
            "label": "task g++", // 任务名称，显示在任务列表中，便于选择
            // 要执行的命令，这里是 MinGW 的 g++ 编译器的完整路径
            "command": "E:/MinGW/mingw64/bin/g++.exe",
            // 编译时传入的参数数组
            "args": [
                "-fdiagnostics-color=always", // 命令行输出带颜色，方便区分错误和警告
                "-g", // 生成调试信息，用于调试器断点调试
                "${file}", // 当前打开文件的完整路径，作为输入文件
                "-o", // 指定输出文件参数
                "${fileDirname}\\${fileBasenameNoExtension}.exe" // 输出路径：当前文件目录 + 文件名.exe
            ],
            // 执行命令时的工作目录
            "options": {
                "cwd": "E:/MinGW/mingw64/bin"
            },
            // 用于 VS Code 解析编译器输出并定位错误的匹配器，这里用内置的 gcc 匹配器
            "problemMatcher": [
                "$gcc"
            ],
            // 任务组，方便按组执行和快捷键绑定
            "group": "build",
            // 任务的详细描述，显示在界面中
            "detail": "compiler: E:/MinGW/mingw64/bin/g++.exe"
        },
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe build active file",
            "command": "E:/MinGW/mingw64/bin/g++.exe",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            "options": {
                "cwd": "E:/MinGW/mingw64/bin"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build", // 归属构建组
                "isDefault": true // 标记为默认构建任务，Ctrl+Shift+B 默认执行这个
            },
            "detail": "Task generated by Debugger." // 任务描述
        }
    ]
}